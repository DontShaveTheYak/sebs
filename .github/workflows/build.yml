name: Build

on:
  pull_request:
    branches:
      - develop
      - master
    paths:
      - '**.py' # Only run this workflow when python files change

jobs:
  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
    
    - name: Fetch all history
      run: git fetch --prune --unshallow --tags

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Unit Tests
      run: python -m unittest discover -s tests/unit

  functional:
    name: Functional Tests
    runs-on: ubuntu-latest
    if: github.base_ref == 'sdfjsdlfksjd'
    needs: unit
    env: 
      GITHUB_SOURCE_BRANCH: ${{ github.head_ref }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Run Functional Tests
      run: python -m unittest discover -s tests/functional -f

  pypi:
    name: Test Pypi
    runs-on: ubuntu-latest
    if: github.base_ref == 'master'
    needs: unit
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
  
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
